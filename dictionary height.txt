#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

// Node class represents each entry in the dictionary
class Node {
public:
    string keyword, meaning;  // Keyword and its meaning
    Node* left;               // Pointer to left subtree
    Node* right;              // Pointer to right subtree
    int height;               // Height of this node for AVL balancing

    Node(string key, string mean) {
        keyword = key;
        meaning = mean;
        left = right = nullptr;
        height = 1;
    }
};

// AVL Tree-based Dictionary class
class Dictionary {
    Node* root;

    // Get height of a node (nullptr has height 0)
    int height(Node* n) {
        return n ? n->height : 0;
    }

    // Get balance factor (left height - right height)
    int balanceFactor(Node* n) {
        return n ? height(n->left) - height(n->right) : 0;
    }

    // Right rotate (used for LL imbalance)
    Node* rotateRight(Node* y) {
        Node* x = y->left;
        Node* T2 = x->right;

        x->right = y;
        y->left = T2;

        // Update heights
        y->height = 1 + max(height(y->left), height(y->right));
        x->height = 1 + max(height(x->left), height(x->right));

        return x; // New root
    }

    // Left rotate (used for RR imbalance)
    Node* rotateLeft(Node* x) {
        Node* y = x->right;
        Node* T2 = y->left;

        y->left = x;
        x->right = T2;

        // Update heights
        x->height = 1 + max(height(x->left), height(x->right));
        y->height = 1 + max(height(y->left), height(y->right));

        return y; // New root
    }

    // Recursive insert with AVL balancing
    Node* insert(Node* node, string key, string mean) {
        if (!node) return new Node(key, mean);

        if (key < node->keyword)
            node->left = insert(node->left, key, mean);
        else if (key > node->keyword)
            node->right = insert(node->right, key, mean);
        else {
            cout << "Keyword already exists. Updating meaning.\n";
            node->meaning = mean;
            return node;
        }

        // Update height and balance
        node->height = 1 + max(height(node->left), height(node->right));
        int bf = balanceFactor(node);

        // Perform rotations if unbalanced
        if (bf > 1 && key < node->left->keyword) return rotateRight(node);     // LL
        if (bf < -1 && key > node->right->keyword) return rotateLeft(node);    // RR
        if (bf > 1 && key > node->left->keyword) {                              // LR
            node->left = rotateLeft(node->left);
            return rotateRight(node);
        }
        if (bf < -1 && key < node->right->keyword) {                            // RL
            node->right = rotateRight(node->right);
            return rotateLeft(node);
        }

        return node;
    }

    // Find node with smallest keyword (used in deletion)
    Node* minValueNode(Node* n) {
        while (n && n->left)
            n = n->left;
        return n;
    }

    // Recursive deletion with AVL balancing
    Node* remove(Node* root, string key) {
        if (!root) return root;

        // Search for node
        if (key < root->keyword)
            root->left = remove(root->left, key);
        else if (key > root->keyword)
            root->right = remove(root->right, key);
        else {
            // Node with one or no child
            if (!root->left || !root->right) {
                Node* temp = root->left ? root->left : root->right;
                delete root;
                return temp;
            }

            // Node with two children
            Node* succ = minValueNode(root->right);
            root->keyword = succ->keyword;
            root->meaning = succ->meaning;
            root->right = remove(root->right, succ->keyword);
        }

        // Update height and rebalance
        root->height = 1 + max(height(root->left), height(root->right));
        int bf = balanceFactor(root);

        // Balance tree
        if (bf > 1 && balanceFactor(root->left) >= 0) return rotateRight(root);     // LL
        if (bf > 1 && balanceFactor(root->left) < 0) {
            root->left = rotateLeft(root->left);
            return rotateRight(root);                                              // LR
        }
        if (bf < -1 && balanceFactor(root->right) <= 0) return rotateLeft(root);   // RR
        if (bf < -1 && balanceFactor(root->right) > 0) {
            root->right = rotateRight(root->right);
            return rotateLeft(root);                                               // RL
        }

        return root;
    }

    // In-order traversal: Ascending order
    void inorder(Node* n) {
        if (!n) return;
        inorder(n->left);
        cout << n->keyword << " : " << n->meaning << "\n";
        inorder(n->right);
    }

    // Reverse in-order traversal: Descending order
    void reverseInorder(Node* n) {
        if (!n) return;
        reverseInorder(n->right);
        cout << n->keyword << " : " << n->meaning << "\n";
        reverseInorder(n->left);
    }

    // Recursive search with comparison count
    void search(Node* n, string key, int& comparisons) {
        if (!n) return;
        comparisons++;
        if (key == n->keyword) {
            cout << "Found: " << n->keyword << " = " << n->meaning << "\n";
            return;
        }
        if (key < n->keyword)
            search(n->left, key, comparisons);
        else
            search(n->right, key, comparisons);
    }

public:
    // Constructor
    Dictionary() { root = nullptr; }

    // Public wrapper for insertion
    void insert(string key, string meaning) {
        root = insert(root, key, meaning);
    }

    // Public wrapper for deletion
    void remove(string key) {
        root = remove(root, key);
        cout << "Deleted keyword: " << key << "\n";
    }

    // Public wrapper to modify meaning
    void modify(string key, string newMeaning) {
        Node* temp = root;
        while (temp) {
            if (key == temp->keyword) {
                temp->meaning = newMeaning;
                cout << "Updated meaning for: " << key << "\n";
                return;
            }
            temp = (key < temp->keyword) ? temp->left : temp->right;
        }
        cout << "Keyword not found.\n";
    }

    // Display dictionary in ascending order
    void displayAscending() {
        cout << "Dictionary in Ascending Order:\n";
        inorder(root);
    }

    // Display dictionary in descending order
    void displayDescending() {
        cout << "Dictionary in Descending Order:\n";
        reverseInorder(root);
    }

    // Search for a keyword and show comparisons
    void searchKeyword(string key) {
        int comparisons = 0;
        search(root, key, comparisons);
        cout << "Comparisons made: " << comparisons << "\n";
    }
};

// Main menu-driven program
int main() {
    Dictionary dict;
    int choice;
    string key, meaning;

    do {
        cout << "\n--- Dictionary Menu ---\n";
        cout << "1. Insert\n2. Delete\n3. Modify\n4. Search\n";
        cout << "5. Display Ascending\n6. Display Descending\n0. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter keyword: ";
            cin >> key;
            cout << "Enter meaning: ";
            cin.ignore();
            getline(cin, meaning);
            dict.insert(key, meaning);
            break;
        case 2:
            cout << "Enter keyword to delete: ";
            cin >> key;
            dict.remove(key);
            break;
        case 3:
            cout << "Enter keyword to modify: ";
            cin >> key;
            cout << "Enter new meaning: ";
            cin.ignore();
            getline(cin, meaning);
            dict.modify(key, meaning);
            break;
        case 4:
            cout << "Enter keyword to search: ";
            cin >> key;
            dict.searchKeyword(key);
            break;
        case 5:
            dict.displayAscending();
            break;
        case 6:
            dict.displayDescending();
            break;
        case 0:
            cout << "Goodbye!\n";
            break;
        default:
            cout << "Invalid choice.\n";
        }

    } while (choice != 0);

    return 0;
}

// Objective: 
// To understand the concept and basic of Height balanced Binary Search tree or AVL tree 
// in Data structure. 
// Outcome: 
// To implement the basic concept of AVL tree and to perform basic operation insert, 
// search and delete an element in AVL tree also able to apply correct rotation when tree is 
// unbalance after insertion and deletion operation in Data structure.s